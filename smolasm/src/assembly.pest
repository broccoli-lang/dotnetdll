WHITESPACE = _{ " " | NEWLINE | "\t" }

nat = { ASCII_DIGIT+ }

ident = @{ XID_START ~ XID_CONTINUE* }
dotted = @{ (ident ~ ".")* ~ ident }

version = ${ "v" ~ nat ~ ("." ~ nat){0,3} }
asm_spec = _{ dotted ~ version? }

asm_decl = { "assembly" ~ asm_spec }
extern_decl = { "extern" ~ asm_spec }

int_type = { "bool" | "char" | "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "nint" | "nuint" }
type_ref = ${ ("[" ~ dotted ~ "]") ~ dotted }
clitype = ${ int_type | "string" | "object" | "float" | "double" | ("valuetype"? ~ type_ref) | ("[" ~ clitype ~ "]") | ("*" ~ clitype) }

enum_decl = { int_type? ~ "enum" ~ dotted ~ "{" ~ ident* ~ "}" }

access = { "public" | ("private" ~ "protected"?) | ("protected" ~ "internal"?) | "internal" }

local_var = { clitype ~ ident }
label = @{ ident ~ ":" }
instruction = ${ ASCII_ALPHA_LOWER+ ~ (!"\n" ~ ANY)* } // instructions are specially parsed, terminated by a newline
method_body = { (local_var+ ~ "---")? ~ (label | instruction)+ }

param_type = { "ref"? ~ clitype }
param = _{ param_type ~ ident }
method = { "method" ~ ("void" | param_type) ~ ident ~ "(" ~ ((param ~ ",")* ~ param)? ~ ")" ~ ("{" ~ method_body ~ "}")? }

field = { "field" ~ clitype ~ ident }

semantic_method = { ident ~ "{" ~ method_body ~ "}" }
property = { "property" ~ clitype ~ ident ~ "{" ~ semantic_method* ~ "}" }
event = { "event" ~ clitype ~ ident ~ "{" ~ semantic_method* ~ "}" }

type_item = { access ~ "static"? ~ (field | property | method | event) }
extends = { "extends" ~ type_ref }
implements = { "implements" ~ (type_ref ~ ",")* ~ type_ref }
type_kind = { "class" | "struct" | "interface" }
type_decl = { type_kind ~ dotted ~ extends? ~ implements? ~ "{" ~ type_item* ~ "}" }

top_level_decl = { "public"? ~ (type_decl | enum_decl) }

assembly = _{
    SOI ~
    asm_decl ~
    extern_decl* ~
    top_level_decl* ~
    EOI
}
