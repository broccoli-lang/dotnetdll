WHITESPACE = _{ " " | NEWLINE | "\t" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

nat = { ASCII_DIGIT+ }

ident = @{ XID_START ~ XID_CONTINUE* }
dotted = @{ (ident ~ ".")* ~ ident }
method_ident = @{ ".ctor" | ".cctor" | ident }

version = ${ "v" ~ nat ~ ("." ~ nat){0,3} }
asm_spec = _{ dotted ~ version? }

asm_decl = { "assembly" ~ asm_spec }
extern_decl = { "extern" ~ asm_spec }

int_type = { "bool" | "char" | "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "nint" | "nuint" }
type_ref = ${ ("[" ~ dotted ~ "]")? ~ dotted }
vector = { "[" ~ clitype ~ "]" }
void_ptr = { "void" }
pointer = { "*" ~ (void_ptr | clitype) }
clitype = { int_type | "string" | "object" | "float" | "double" | ("valuetype"? ~ type_ref) | vector | pointer }

enum_decl = { int_type? ~ "enum" ~ dotted ~ "{" ~ ident* ~ "}" }

access = { "public" | ("private" ~ "protected"?) | ("protected" ~ "internal"?) | "internal" }

// used inside instruction parsing
field_name = ${ clitype ~ "::" ~ ident }
field_ref = { clitype ~ field_name }
method_name = ${ clitype ~ "::" ~ method_ident }
method_ref = { "static"? ~ method_name ~ "(" ~ ((param_type ~ ",")* ~ param_type)? ~ ")" ~ "->" ~ return_type }
ctor_ref = { clitype ~ "(" ~ ((param_type ~ ",")* ~ param_type)? ~ ")" }

local_var = { clitype ~ ident }
locals = { "init"? ~ "{" ~ local_var* ~ "}" }
label = @{ ident ~ ":" }
instruction = ${ ASCII_ALPHA_LOWER+ ~ (!"\n" ~ ANY)* } // instructions are specially parsed, terminated by a newline
method_body = { ("maxstack" ~ nat)? ~ ("locals" ~ locals)? ~ (label | instruction)+ }

param_type = { "ref"? ~ clitype }
param = { param_type ~ ident }
return_type = { "void" | param_type }
method_attribute = @{ "@" ~ ident }
method = { "method" ~ method_ident ~ "(" ~ ((param ~ ",")* ~ param)? ~ ")" ~ "->" ~ return_type ~ method_attribute* ~ ("{" ~ method_body ~ "}")? }

field = { "field" ~ clitype ~ ident }

semantic_method = { ident ~ "{" ~ method_body ~ "}" }
property = { "property" ~ clitype ~ ident ~ "{" ~ semantic_method* ~ "}" }
event = { "event" ~ clitype ~ ident ~ "{" ~ semantic_method* ~ "}" }

static_member = { "static" }
type_item = { access ~ static_member? ~ (field | property | method | event) }
extends = { "extends" ~ type_ref }
implements = { "implements" ~ (type_ref ~ ",")* ~ type_ref }
type_kind = { ("abstract"? ~ "class") | "struct" | "interface" }
type_decl = { type_kind ~ dotted ~ extends? ~ implements? ~ "{" ~ type_item* ~ "}" }

top_level_decl = { "public"? ~ (type_decl | enum_decl) }

assembly = _{
    SOI ~
    asm_decl ~
    extern_decl* ~
    top_level_decl* ~
    EOI
}
